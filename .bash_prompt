#!/bin/bash

# -----------------------------------------------------------------------------
# Author: Paul Weaver (weaverp@ruthorn.co.uk)
#
# Assign the prompt_command function defined below to the PROMPT_COMMAND
# environment variable in your .bashrc/.bash_profile to get a pretty prompt
# containing a bunch of information.
#
# Note: I don't provide a warranty of any kind with this software! On the plus
# side, however, please feel free to distribute this file to your friends,
# family, pets etc. (So long as you keep this attribution)
# -----------------------------------------------------------------------------

# NOTE colours will just fail silently if not present aside from the intial
# warning that .bash_colours is missing.

function _prompt_padding {
    # Creates a string of spaces of the passed size
    local size=$1
    local result
    printf -v result "%${size}s" ' '
    echo "$result"
}
function _prompt_repeat_chars {
    # Creates a string of <size> repeats of <char>
    local char=$1
    local size=$2
    local temp_str=$(_prompt_padding ${size})
    echo ${temp_str// /${char}}
}

if ! __git_ps1 &> /dev/null; then
    # Redefine __git_ps1 to print a helpful warning if it's not installed
    function __git_ps1 {
        echo '[Install __git_ps1]'
    }
fi

function _prompt_command {
    local git_text git_ahead
    if git branch &> /dev/null; then
        # git is working and we're on a git branch
        if [[ "$(__git_ps1)" =~ 'GIT_DIR!' ]]; then
            # we're in the git directory!
            git_text="${Purple}$(__git_ps1) ${Color_Off}"
        else
            if git status | grep "nothing to commit" > /dev/null 2>&1; then
                # Clean repository - nothing to commit
                git_text="${Green} $(__git_ps1 "(%s)") ${Color_Off}"
            elif git status | grep "nothing added to commit but untracked files present" > /dev/null 2>&1; then
                # No changes but files to add
                git_text="${Cyan} $(__git_ps1 "[%s]") ${Color_Off}"
            else
                # Changes to working tree
                git_text="${Red} $(__git_ps1 "{%s}") ${Color_Off}"
            fi
            git_ahead=$(git status | awk '/Your branch is ahead/{print "→" $8 " "}\
                /Your branch is behind/{print $7 "← "}\
                /diverged/,/respectively/{if ($0 ~ /respectively/) print $5 "←→" $3 " "}')
            git_text="${git_text}${Yellow}${git_ahead%→*}${Red}${git_ahead#*←}${Color_Off}"
        fi
    else
        # prompt component when not in git
        git_text=' '
    fi

    local date_text=${IBlue}$(date +%H:%M)${Color_Off}
    local pwd_text="$(pwd | sed "s|$HOME|~|")"

    local remove_color_codes_regex="s/\\\\\[\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]\\\\\]//g"
    local length_elements=$(echo -e "${pwd_text}${git_text}}${date_text}" | perl -pe $remove_color_codes_regex)
    local rule_length=$(($COLUMNS - ${#length_elements} - 1))

    local rule
    if [[ ${rule_length} -gt 0 ]]; then
        # Everything fits on the info line
        rule="${BBlue}$(_prompt_repeat_chars '─' ${rule_length}) "
    elif [[ ${rule_length} == 0 ]]; then
        # Everything JUST fits on the info line
        rule=""
    else
        # We need to truncate our path because the info line is too short
        pwd_text="…${pwd_text:$((${rule_length} * -1))}"
        rule=""
    fi
    pwd_text=${Blue}${pwd_text}${Color_Off}

	PS1="\n${pwd_text}${git_text}${rule}${date_text}\n\$ "
}

PROMPT_COMMAND="_prompt_command"
